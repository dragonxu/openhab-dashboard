import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.joda.time.*
import java.util.*
import java.util.concurrent.locks.*

var Map lastStateMap = new HashMap()
var Lock lock = new ReentrantLock()

rule "Post changes to Dashing Dashboard"
when
	Item gDashboard received update
then
	lock.lock()
	//logInfo("Dashboard","Dashing group rule triggered.")
	gDashboard?.members.forEach[t | 
			var lastState = lastStateMap.put(t.name, t.state)
			if (lastState != t.state || lastState == null) {
				
				val DASHING_TOKEN = '"auth_token" : "openH4b"'
				val DASHING_URI = "http://localhost:3030/widgets/"

				///logInfo("Dashboard","Item " + item.name + " changed.")
				logInfo("Dashboard","Item " + t.name + " has changed state from " +lastState.toString + " to: " + t.state.toString)
				var uri = DASHING_URI + t.name
				var json = '{' + DASHING_TOKEN + ', '

				if (t.state.toString.startsWith("{")){
					var internalJSON = t.state.toString.substring(1) //remove opening '{' as the string will be concatenated with our prefix items
					//internalJSON = internalJSON.substring(0,internalJSON.length() - 1)
					json = json +  t.state.toString.substring(1) 
					logInfo ("Dashboard","[Debug] json = " + json)
				} else{
					json = json + ' "state" : "' + t.state.toString + '"}'
				}

				logInfo ("Dashboard", "POSTING: " + json) 
				logInfo ("Dashboard", "URI: " + uri + "; JSON = " + json ) 
				sendHttpPostRequest(uri, "HTTP.CONTENT_TYPE_JSON", json)
			}
		]
	lock.unlock()
end

rule "HVAC Up Dashboard widget update"
when
	Item HVAC_Up_HeatSetPoint received update or
	Item HVAC_Up_CoolSetPoint received update or
	Item HVAC_Up_Operating_State received update or
	Item HVAC_Up_Temperature received update or
	Item HVAC_Up_Mode received update
then
	//Need to ensure that the new status string is a valid json, as otherwise when dashing gets the state property directly, it will fail
	var String status = null
	var String opstate = null
	//logInfo("Dashboard","Updating heating status Dashboard widget")
	
	if (HVAC_Up_Operating_State.state == 1){
		opstate = "Heating"
	} else if(HVAC_Up_Operating_State.state == 2) {
		opstate = "Cooling"
	} else {
		opstate = "Off"
	}
	// mappings=[0="Off",1="Heating",2="Cooling"]
	if (HVAC_Up_Mode.state == 1){
		status = '{"mode" : "Heating", "temperature" : ' + HVAC_Up_Temperature.state.toString + ', "target" : ' + HVAC_Up_HeatSetPoint.state.toString  + ', "hvacstate" : "' + opstate  + '"}'
	} else if(HVAC_Up_Mode.state == 2) {
		status = '{"mode" : "Cooling", "temperature" : ' + HVAC_Up_Temperature.state.toString + ', "target" : ' + HVAC_Up_CoolSetPoint.state.toString  + ', "hvacstate" : "' + opstate  + '"}'
	}else {
		status = '{"mode" : "Off", "temperature" : ' + HVAC_Up_Temperature.state.toString + ', "target" : ' + HVAC_Up_Temperature.state.toString  + ', "hvacstate" : "' + opstate  + '"}'
	}
	
	postUpdate(HVAC_Up_Dashboard,status)
end

rule "HVAC Down Dashboard widget update"
when
	Item HVAC_Down_HeatSetPoint received update or
	Item HVAC_Down_CoolSetPoint received update or
	Item HVAC_Down_Temperature received update or
	Item HVAC_Down_Mode received update or
	Item HVAC_Down_Operating_State received update
then
	//Need to ensure that the new status string is a valid json, as otherwise when dashing gets the state property directly, it will fail
	var String status = null
	var String opstate = null
	//logInfo("Dashboard","Updating heating status Dashboard widget")
	
	if (HVAC_Down_Operating_State.state == 1){
		opstate = "Heating"
	} else if(HVAC_Down_Operating_State.state == 2) {
		opstate = "Cooling"
	} else {
		opstate = "Off"
	}
	// mappings=[0="Off",1="Heating",2="Cooling"]
	if (HVAC_Down_Mode.state == 1){
		status = '{"mode" : "Heating", "temperature" : ' + HVAC_Down_Temperature.state.toString + ', "target" : ' + HVAC_Down_HeatSetPoint.state.toString  + ', "hvacstate" : "' + opstate  + '"}'
	} else if(HVAC_Down_Mode.state == 2) {
		status = '{"mode" : "Cooling", "temperature" : ' + HVAC_Down_Temperature.state.toString + ', "target" : ' + HVAC_Down_CoolSetPoint.state.toString  + ', "hvacstate" : "' + opstate  + '"}'
	}else {
		status = '{"mode" : "Off", "temperature" : ' + HVAC_Down_Temperature.state.toString + ', "target" : ' + HVAC_Down_Temperature.state.toString  + ', "hvacstate" : "' + opstate  + '"}'
	}
	
	postUpdate(HVAC_Down_Dashboard,status)
end
